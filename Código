/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetov1;

import com.panayotis.gnuplot.JavaPlot;
import com.panayotis.gnuplot.plot.DataSetPlot;
import com.panayotis.gnuplot.style.NamedPlotColor;
import com.panayotis.gnuplot.style.PlotStyle;
import com.panayotis.gnuplot.style.Style;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;


public class ProjetoV1 {

    public static void main(String[] args) throws FileNotFoundException, IOException {
        int[][] dadosFicheiro = new int[22681][5];
        int linhas=0;
        int[] serieTemp=null;
        Scanner ler=new Scanner(System.in);
        /*
        File f = new File(args[0]);
        if (f.exists()){
            System.out.println("Ficheiro verificado com sucesso, escolha a funcionalidade!");
        }
        if (!f.exists()){
                        System.out.println("Ficheiro não existe, a sair!");
        System.exit(0); 
        }
        */
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|  Função   |                              Descrição                                 |                                  Funcionalidades                                              |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|     1     | Leitura do Ficheiro                                                    |    Leitura do ficheiro CSV e carregamento do mesmo para a aplicação                           |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|           |                                                                        |    Escolha de uma resolução temporal                                                          |");
        System.out.println("|           |                                                                        |    Cálculo da média global da série                                                           |");
        System.out.println("|     2     | Análise de séries temporais utilizando diferentes resoluções           |    Definição dos intervalos para apresentação do histograma                                   |");
        System.out.println("|           |                                                                        |    Cálculo do número de observações                                                           |");
        System.out.println("|           |                                                                        |    Ordenação da série temporal                                                                |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|     3     | Filtragem/Suavização de séries temporais                               |    Filtragem através da Média Móvel Simples                                                   |");
        System.out.println("|           |                                                                        |    Filtragem através da Média Móvel Exponencialmente Pesada                                   |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|           |                                                                        |    Escolha de uma resolução temporal                                                          |");
        System.out.println("|     4     | Previsão de valores futuros a partir de uma série temporal             |    Cálculo do previsão através da Média Móvel Simples                                         |");
        System.out.println("|           |                                                                        |    Cálculo do previsão através da Média Móvel Exponencialmente Pesada                         |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|     5     | Introdução de um novo ficheiro                                         |    Leitura de um novo ficheiro CSV                                                            |");
        System.out.println("|           |                                                                        |    Apagar da memória toda a informação antiga                                                 |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println("|     0     | Sair                                                                   |    Fechar a aplicação                                                                         |");
        System.out.println("|-----------|------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|");
        System.out.println();
        System.out.println("Qual o exercício que pretende executar?");
        int N=ler.nextInt();
        while(N>0){
            switch(N){
                case 1:
                    linhas = guardarDados(dadosFicheiro);
                    System.out.println("INFORMAÇÃO DO FICHEIRO ARMAZENADA EM MEMÓRIA!!");
                    break;
                case 2:
                    serieTemp = analisarDados(dadosFicheiro, linhas); 
                    double mgs = mediaGlobal(serieTemp, linhas);  
                    definirIntervalos(mgs, serieTemp);
                    break;
                case 3:
                    EscolhaMedia(serieTemp, linhas);
                    break;
                case 4:
                    Previsao(dadosFicheiro, linhas);
                    break;
                case 5:                                 
                    lerFicheiroCSV(dadosFicheiro);
                default:
                    break;     
            }
            System.out.println("");
            System.out.println("Que outra funcionalidade pretende utilizar?");
            N=ler.nextInt();        
        } 
    }
    public static int guardarDados(int[][] dadosFicheiro) throws FileNotFoundException {
        int qtdlinhas = 0;
        Scanner lerFicheiro = new Scanner(new File("DAYTON.csv"));

        String lixo = lerFicheiro.nextLine();
        while (lerFicheiro.hasNextLine()) {
            String line = lerFicheiro.nextLine();
            String[] espacos = line.split("[-| |:|,|]");
            dadosFicheiro[qtdlinhas][0] = Integer.parseInt(espacos[0]);
            dadosFicheiro[qtdlinhas][1] = Integer.parseInt(espacos[1]);
            dadosFicheiro[qtdlinhas][2] = Integer.parseInt(espacos[2]);
            dadosFicheiro[qtdlinhas][3] = Integer.parseInt(espacos[3]);
            dadosFicheiro[qtdlinhas][4] = Integer.parseInt(espacos[6]);
            qtdlinhas++;
        }
        lerFicheiro.close();
        return qtdlinhas;
    }

    public static int[] analisarDados(int[][] dadosFicheiro, int linhas) throws IOException {
        System.out.println("ANÁLISE");
        Scanner ler = new Scanner(System.in);
        System.out.println("Introduza a resolução temporal(periodo do dia, dia, mes, ano): ");
        String time = ler.nextLine();
        switch (time.toLowerCase()) {
            case "diario":
                int[] energiasD;
                energiasD = analisarDia(dadosFicheiro, linhas);
                ordenarValores(energiasD, linhas);
                return energiasD;
            case "mensal":
                int[] energiasM;
                energiasM = analisarMes(dadosFicheiro, linhas);
                ordenarValores(energiasM, linhas);
                return energiasM;
            case "anual":
                int[] energiasA;
                energiasA = analisarAno(dadosFicheiro, linhas);
                ordenarValores(energiasA, linhas);
                return energiasA;
            case "periodo do dia":
                System.out.println("Introduza o periodo do dia que pretende analisar(madrugada, manha, tarde, noite)!");
                String periodo = ler.nextLine();
                int lowerLimit,
                 upperLimit;
                switch (periodo.toLowerCase()) {
                    case "madrugada":
                        int[] energiasMadrugada;
                        lowerLimit = 00;
                        upperLimit = 05;
                        energiasMadrugada = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        ordenarValores(energiasMadrugada, linhas);
                        return energiasMadrugada;
                    case "manha":
                        int[] energiasManha;
                        lowerLimit = 06;
                        upperLimit = 11;
                        energiasManha = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        ordenarValores(energiasManha, linhas);
                        return energiasManha;
                    case "tarde":
                        int[] energiasTarde;
                        lowerLimit = 12;
                        upperLimit = 17;
                        energiasTarde = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        ordenarValores(energiasTarde, linhas);
                        return energiasTarde;
                    case "noite":
                        int[] energiasNoite;
                        lowerLimit = 18;
                        upperLimit = 23;
                        energiasNoite = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        ordenarValores(energiasNoite, linhas);
                        return energiasNoite;
                    case "default":
                        break;
                }
            case "default":
                break;
        }
        return null;
    }
    public static int[] analisarDia(int[][] dadosFicheiro, int linhas) throws IOException {
        int p = 0;
        int soma = dadosFicheiro[0][4];
        int[] energiasD = new int[linhas];
        for (int posicao = 0; posicao < linhas; posicao++) {
            if (dadosFicheiro[posicao][2] == dadosFicheiro[posicao + 1][2] && dadosFicheiro[posicao + 1][4] != 0) {
                soma = soma + dadosFicheiro[posicao + 1][4];
            } else {
                energiasD[p] = soma;
                soma = dadosFicheiro[posicao + 1][4];
                p++;
            }
        }
        int x = 0;
        while (energiasD[x] != 0) {
            System.out.println(energiasD[x]);
            x++;
        }
        visualizarGraficoAnalise(energiasD);
        return energiasD;
    }
    public static int[] analisarMes(int[][] dadosFicheiro, int linhas) throws IOException {
        int p = 0;
        int soma = dadosFicheiro[0][4];
        int[] energiasM = new int[linhas];
        for (int posicao = 0; posicao < linhas; posicao++) {
            if (dadosFicheiro[posicao][1] == dadosFicheiro[posicao + 1][1] && dadosFicheiro[posicao + 1][1] != 0) {
                soma = soma + dadosFicheiro[posicao + 1][4];
            } else {
                energiasM[p] = soma;
                soma = dadosFicheiro[posicao + 1][4];
                p++;
            }
        }
        int x = 0;
        while (energiasM[x] != 0) {
            System.out.println(energiasM[x]);
            x++;
        }
        visualizarGraficoAnalise(energiasM);
        return energiasM;
    }
    public static int[] analisarAno(int[][] dadosFicheiro, int linhas) throws IOException {
        int p = 0;
        int soma = dadosFicheiro[0][4];
        int[] energiasA = new int[linhas];
        for (int posicao = 0; posicao < linhas; posicao++) {
            if (dadosFicheiro[posicao][0] == dadosFicheiro[posicao + 1][0]) {
                soma = soma + dadosFicheiro[posicao + 1][4];
            } else {
                energiasA[p] = soma;
                soma = dadosFicheiro[posicao + 1][4];
                p++;
            }
        }
        int x = 0;
        while (energiasA[x] != 0) {
            System.out.println(energiasA[x]);
            x++;
        }
        visualizarGraficoAnalise(energiasA);
        return energiasA;
    }
    public static int[] analisarPeriodo(int[][] dadosFicheiro, int lowerLimit, int upperLimit, int linhas) throws IOException {
        int p = 0;
        int soma = 0;
        int[] energiasP = new int[linhas];
        for (int posicao = 0; posicao < linhas; posicao++) {
            if (dadosFicheiro[posicao][3] >= lowerLimit && dadosFicheiro[posicao][3] <= upperLimit && dadosFicheiro[posicao][2] == dadosFicheiro[posicao + 1][2] && dadosFicheiro[posicao + 1][4] != 0) {
                soma = soma + dadosFicheiro[posicao][4];
            } else {
                if (soma != 0) {
                    energiasP[p] = soma;
                    p++;
                    soma = 0;
                }
            }
        }
        int x = 0;
        while (energiasP[x] != 0) {
            System.out.println(energiasP[x]);
            x++;
        }
        visualizarGraficoAnalise(energiasP);
        return energiasP;
    }
    public static void visualizarGraficoAnalise (int [] array) throws FileNotFoundException, IOException{
   
        JavaPlot p = new JavaPlot();
        PlotStyle myPlotStyle = new PlotStyle();
        myPlotStyle.setStyle(Style.DOTS);
        myPlotStyle.setLineWidth(5);        
        myPlotStyle.setLineType(NamedPlotColor.BLUE);
        myPlotStyle.setLineType(2);
        int tab[][];
        tab = new int[22700][1];
        passarDados(tab, array);
        DataSetPlot s = new DataSetPlot(tab);
        s.setTitle("Análise Exemplo");
        s.setPlotStyle(myPlotStyle);
        p.addPlot(s);
        p.newGraph();
                
    }
    public static void passarDados (int [][] tab, int [] array ) {
        for(int i=0; i<array.length; i++){
            tab[i][0]=array[i];
        }
    }
    public static double mediaGlobal(int[] serieTemp, int linhas) {
        int somaFinal = 0;
        double media;
        for (int i = 0; i < serieTemp.length; i++) {
            somaFinal = serieTemp[i] + somaFinal;
        }
        media = somaFinal / linhas;
        return media;
    }
    public static void definirIntervalos(double mgs, int[] serieTemp) {
        double mediaInferior = mgs - (0.2 * mgs);
        double mediaSuperior = mgs + (0.2 * mgs);
        numeroObservacoes(serieTemp, mediaInferior, mediaSuperior);
    }
    public static void numeroObservacoes(int[] serieTemp, double mediaInferior, double mediaSuperior) {
        int contadorInf = 0, contadorSup = 0, contadorMeio = 0, contador;
        for (int posicao = 0; posicao < serieTemp.length; posicao++) {
            if (serieTemp[posicao] < mediaInferior) {
                contadorInf++;
            } else if (serieTemp[posicao] >= mediaInferior && serieTemp[posicao] < mediaSuperior) {
                contadorMeio++;
            } else {
                contadorSup++;
            }
        }
         visualizarGraficoIntervalos(contadorInf, contadorMeio, contadorSup, mediaInferior, mediaSuperior);
    }
    public static void visualizarGraficoIntervalos(int contadorInf, int contadorMeio, int contadorSup, double mediaInferior, double mediaSuperior) {
        JavaPlot p = new JavaPlot();
        PlotStyle myPlotStyle = new PlotStyle();
        myPlotStyle.setStyle(Style.HISTOGRAMS);
        myPlotStyle.setLineWidth(5);        
        myPlotStyle.setLineType(NamedPlotColor.BLUE);
        myPlotStyle.setLineType(2);
        double tab[][];
        tab = new double[3][1];
        tab[0][0] = contadorInf;
        tab[1][0] = contadorMeio;
        tab[2][0] = contadorSup;
        DataSetPlot s = new DataSetPlot(tab);
        s.setTitle("Histograma exemplo");
        s.setPlotStyle(myPlotStyle);
        p.addPlot(s);
        p.newGraph();
        p.plot();
    }
    public static void ordenarValores(int[] energia, int linhas) {
        Scanner utilizador = new Scanner(System.in);
        System.out.println("Pretende ordenar os valores de forma crescente ou decrescente?");
        String decisao = utilizador.nextLine();
        if (decisao.equalsIgnoreCase("crescente") || decisao.equalsIgnoreCase("decrescente")) {
            if (decisao.equalsIgnoreCase("crescente")) {
                int start = 0, end = linhas - 1;
                mergeSortCrescente(energia, start, end);

            } else if (decisao.equalsIgnoreCase("decrescente")) {
                int start = 0, end = linhas - 1;
                mergeSortDecrescente(energia, start, end);
            }
            for (int z = 0; z < linhas; z++) {
                if (energia[z] != 0) {
                    System.out.println(energia[z]);
                }
            }
        }
    }
    public static void merge(int[] energias, int start, int mid, int end) {
        int temp[] = new int[end - start + 1];
        int i = start, j = mid + 1, k = 0;
        while (i <= mid && j <= end) {
            if (energias[i] <= energias[j]) {
                temp[k] = energias[i];
                k += 1;
                i += 1;
            } else {
                temp[k] = energias[j];
                k += 1;
                j += 1;
            }
        }
        while (i <= mid) {
            temp[k] = energias[i];
            k += 1;
            i += 1;
        }
        while (j <= end) {
            temp[k] = energias[j];
            k += 1;
            j += 1;
        }
        for (i = start; i <= end; i += 1) {
            energias[i] = temp[i - start];
        }

    }
    public static void mergeSortCrescente(int[] energias, int start, int end) {

        if (start < end) {
            int mid = (start + end) / 2;
            mergeSortCrescente(energias, start, mid);
            mergeSortCrescente(energias, mid + 1, end);
            merge(energias, start, mid, end);
        }

    }
    public static void mergeDecrescente(int[] energias, int start, int mid, int end) {
        int temp[] = new int[end - start + 1];
        int i = start, j = mid + 1, k = 0;
        while (i <= mid && j <= end) {
            if (energias[i] >= energias[j]) {
                temp[k] = energias[i];
                k += 1;
                i += 1;
            } else {
                temp[k] = energias[j];
                k += 1;
                j += 1;
            }
        }
        while (i <= mid) {
            temp[k] = energias[i];
            k += 1;
            i += 1;
        }
        while (j <= end) {
            temp[k] = energias[j];
            k += 1;
            j += 1;
        }
        for (i = start; i <= end; i += 1) {
            energias[i] = temp[i - start];
        }

    }
    public static void mergeSortDecrescente(int[] energias, int start, int end) {

        if (start < end) {
            int mid = (start + end) / 2;
            mergeSortDecrescente(energias, start, mid);
            mergeSortDecrescente(energias, mid + 1, end);
            mergeDecrescente(energias, start, mid, end);
        }
    }
    public static void EscolhaFiltragem(int[][] dadosFicheiro, int linhas) throws IOException {
        System.out.println("Suavização/Filtragem da série orginal");
        Scanner ler = new Scanner(System.in);
        System.out.println("Introduza a resolução temporal: ");
        String time = ler.nextLine();
        int [] [] auxiliar = new int [25000][1];
        switch (time.toLowerCase()) {
            case "diario":
                int[] energiaD2 = analisarDia(dadosFicheiro, linhas);
                passarDados2(energiaD2, auxiliar);
                EscolhaMedia(energiaD2, linhas);
                verGrafico(energiaD2);
                break;
            case "mensal":
                int[] energiaM2 = analisarMes(dadosFicheiro, linhas);
                passarDados2(energiaM2, auxiliar);
                EscolhaMedia(energiaM2, linhas);
                verGrafico(energiaM2);
                break;
            case "anual":
                int[] energiaA2 = analisarAno(dadosFicheiro, linhas);
                passarDados2(energiaA2, auxiliar);
                EscolhaMedia(energiaA2, linhas);
                verGrafico(energiaA2);
                break;
            case "periodo do dia":
                System.out.println("Introduza o periodo do dia que pretende analisar!");
                String periodo = ler.nextLine();
                int lowerLimit,
                 upperLimit;
                switch (periodo.toLowerCase()) {
                    case "madrugada":
                        lowerLimit = 00;
                        upperLimit = 05;
                        int[] energiasMadrugada2 = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        passarDados2(energiasMadrugada2, auxiliar);
                        EscolhaMedia(energiasMadrugada2, linhas);
                        verGrafico(energiasMadrugada2);
                        break;
                    case "manha":
                        lowerLimit = 06;
                        upperLimit = 11;
                        int[] energiasManha2 = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        passarDados2(energiasManha2, auxiliar);
                        EscolhaMedia(energiasManha2, linhas);
                        verGrafico(energiasManha2);
                        break;
                    case "tarde":
                        lowerLimit = 12;
                        upperLimit = 17;
                        int[] energiasTarde2 = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        passarDados2(energiasTarde2, auxiliar);
                        EscolhaMedia(energiasTarde2, linhas);
                        verGrafico(energiasTarde2);
                        break;
                    case "noite":
                        lowerLimit = 18;
                        upperLimit = 23;
                        int[] energiasNoite2 = analisarPeriodo(dadosFicheiro, lowerLimit, upperLimit, linhas);
                        passarDados2(energiasNoite2, auxiliar);
                        EscolhaMedia(energiasNoite2, linhas);
                        verGrafico(energiasNoite2);
                        break;                
                }
        }
    }
    public static void passarDados2(int [] mediador, int[][] auxiliar){
        for(int p=0;p<mediador.length;p++){
            auxiliar[p][0] = mediador[p];
        }
    }
    public static void EscolhaMedia(int[] energia, int linhas) {
        Scanner ler = new Scanner(System.in);
        System.out.println("Introduza o tipo de média a utilizar (Média Móvel Simples |OU| Média Móvel Exponencialmente Pesada): ");
        String media = ler.nextLine();
        double[] mms;
        double[] mmep;
        switch (media.toLowerCase()) {
            case "media movel simples":
                mms = MediaMovelSimples(energia, linhas);
                ErroMediaAbsoluto(energia, linhas, mms);
                break;
            case "media movel exponencialmente pesada":
                mmep = mediaPesada(energia, linhas);
                ErroMediaAbsoluto(energia, linhas, mmep);
                break;
            default:
                break;
        }

    }
    public static double[] mediaPesada(int[] energia, int linhas) {
        Scanner ordem = new Scanner(System.in);
        System.out.println("Introduza o valor de α (]0,1])");
        double mmep[] = new double[linhas];
        int x = 0;
        double a;
        mmep[0]=energia[0];
        do {
            a = ordem.nextDouble();
        } while (a <= 0 || a > 1);
        for (int i = 0; i < linhas; i++) {
            if ((x - 1) >= 0) {
                mmep[x] = a * energia[i] + (1 - a) * mmep[x - 1];
                if (mmep[x] > 0) {
                    System.out.println(mmep[x]);
                }
            }
            x++;
        }
        return mmep;
    }
    public static double[] MediaMovelSimples(int[] energia, int linhas) {
        Scanner ordem = new Scanner(System.in);
        System.out.println("Introduza o valor de n");
        int n = ordem.nextInt();
        double[] mms = new double[linhas];
        double soma = 0;
        for (int i = 0; i < energia.length; i++) {
            for (int k = 0; k < n && k <= i; k++) {
                soma += (energia[i - k]);
            }
            mms[i] = soma / n;
            soma = 0;
            if (mms[i] > 0) {
                System.out.printf("%.1f\n",mms[i]);
            }
        }
        return mms;
    }
    public static void ErroMediaAbsoluto(int[] serieTemp, int linhas, double[] media) {
        double erro = 0, error;
        System.out.println("Erro Médio Absoluto");
        for (int x = 0; x < linhas - 1; x++) {
            erro = erro + Math.abs(media[x] - serieTemp[x]);
        }
        error = erro / linhas;
        System.out.println(error);
    }
    public static void verGrafico (int [] array2){
        JavaPlot p = new JavaPlot();
        PlotStyle myPlotStyle = new PlotStyle();
        myPlotStyle.setStyle(Style.HISTOGRAMS);
        myPlotStyle.setLineWidth(5);        
        myPlotStyle.setLineType(NamedPlotColor.BLUE);
        myPlotStyle.setLineType(2);
        double tab[][];
        tab = new double[3][1];
        tab[0][0] = 1;
        tab[1][0] = 2;
        tab[2][0] = 1;
        DataSetPlot s = new DataSetPlot(tab);
        s.setTitle("Histograma exemplo");
        s.setPlotStyle(myPlotStyle);
        p.addPlot(s);
        p.newGraph();
        p.plot();
    }
    public static void Previsao(int[][] dadosFicheiro, int linhas) {
        Scanner ler = new Scanner(System.in);
        String escolha, modelo, periodo;
        int dia, mes, ano;
        int lowerLimit, upperLimit;
        System.out.println("PREVISÃO");
        System.out.println("Que modelo pretende utilizar? Média Móvel Simples (ou) Média Móvel Exponencialmente Pesada");
        modelo = ler.nextLine();

        switch (modelo.toLowerCase()) {
            case "media movel simples":
                System.out.println("Introduza o espaço temporal que pretende analisar (periodo do dia, dia ou mes)");
                escolha = ler.nextLine();

                switch (escolha.toLowerCase()) {
                    case "periodo do dia":
                        System.out.println("Introduza o periodo do dia que pretende (madrugada, manha, tarde ou noite)");
                        periodo = ler.nextLine();
                        switch (periodo.toLowerCase()) {

                            case "madrugada":
                                lowerLimit = 00;
                                upperLimit = 05;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMS(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;

                            case "manha":
                                lowerLimit = 06;
                                upperLimit = 11;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMS(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;

                            case "tarde":
                                lowerLimit = 12;
                                upperLimit = 17;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMS(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;

                            case "noite":
                                lowerLimit = 18;
                                upperLimit = 23;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMS(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;

                            default:
                                break;
                        }
                        break;
                    case "dia":
                        System.out.println("Introduza o dia que pretende analisar");
                        dia = ler.nextInt();
                        System.out.println("Introduza o mes");
                        mes = ler.nextInt();
                        System.out.println("Introduza o ano");
                        ano = ler.nextInt();
                        previsaoMMSDIA(dia, mes, ano, dadosFicheiro, linhas);
                        break;
                    case "mes":
                        System.out.println("Introduza o mes que pretende analisar");
                        mes = ler.nextInt();
                        System.out.println("Introduza o ano");
                        ano = ler.nextInt();
                        previsaoMMSMES(mes, ano, dadosFicheiro, linhas);
                        break;
                    default:
                        break;

                }
                break;
            case "media movel exponencialmente pesada":
                System.out.println("Introduza a resolução temporal que pretende analisar(periodo do dia, dia, mes)");
                escolha = ler.nextLine();

                switch (escolha.toLowerCase()) {
                    case "periodo do dia":
                        System.out.println("Introduza o periodo do dia que pretende: ");
                        periodo = ler.nextLine();
                        switch (periodo.toLowerCase()) {
                            case "madrugada":
                                lowerLimit = 00;
                                upperLimit = 05;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMEP(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;
                            case "manha":
                                lowerLimit = 06;
                                upperLimit = 11;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMEP(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;
                            case "tarde":
                                lowerLimit = 12;
                                upperLimit = 17;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMEP(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;
                            case "noite":
                                lowerLimit = 18;
                                upperLimit = 23;
                                System.out.println("Introduza o dia que pretende analisar");
                                dia = ler.nextInt();
                                System.out.println("Introduza o mes que pretende analisar");
                                mes = ler.nextInt();
                                System.out.println("Introduza o ano");
                                ano = ler.nextInt();
                                previsaoMMEP(dia, mes, ano, upperLimit, lowerLimit, dadosFicheiro, linhas);
                                break;

                            default:
                                break;

                        }

                    case "dia":
                        System.out.println("Introduza o dia que pretende analisar");
                        dia = ler.nextInt();
                        System.out.println("Introduza o mes");
                        mes = ler.nextInt();
                        System.out.println("Introduza o ano");
                        ano = ler.nextInt();
                        previsaoMMEPDIA(dia, mes, ano, dadosFicheiro, linhas);
                        break;
                    case "mes":
                        System.out.println("Introduza o mes que pretende analisar");
                        mes = ler.nextInt();
                        System.out.println("Introduza o ano");
                        ano = ler.nextInt();
                        previsaoMMEPMES(mes, ano, dadosFicheiro, linhas);
                        break;

                    default:
                        break;

                }
            default:
                break;
        }
    }
    public static void previsaoMMS(int dia, int mes, int ano, int upperLimit, int lowerLimit, int[][] dadosFicheiro, int linhas) {
        Scanner ler = new Scanner(System.in);
        double prev = 0.0, resultado;
        System.out.println("Introduza a ordem da Média Móvel");
        int n = ler.nextInt();
        for (int i = 0; i < linhas; i++) {
            for (int k = 0; k < n && k <= i; k++) {
                if (dadosFicheiro[i][0] == ano && dadosFicheiro[i][1] == mes && dadosFicheiro[i][2] == dia-1 && dadosFicheiro[i][3] >= lowerLimit && dadosFicheiro[i][3] <= upperLimit) {
                    prev = (dadosFicheiro[i - k][4]) + prev;
                }
            }
        }
        if (prev==0){
            System.out.println("Não existe momento anterior ao introduzido pelo utilizador!");
        }else{
        resultado = prev / n;
        System.out.println(resultado);
    }
    }
    public static void previsaoMMSDIA(int dia, int mes, int ano, int[][] dadosFicheiro, int linhas) {
        Scanner ler = new Scanner(System.in);
        double prev = 0.0, resultado;
        System.out.println("Introduza a ordem da Média Móvel");
        int n = ler.nextInt();
        for (int i = 0; i < linhas; i++) {
            for (int k = 0; k < n && k <= i; k++) {
                if (dadosFicheiro[i][0] == ano && dadosFicheiro[i][1] == mes && dadosFicheiro[i][2]==dia-1) {
                    prev = (double)(dadosFicheiro[i - k][4]) + prev;
                }
            }
        }
        if (prev==0){
            System.out.println("Não existe momento anterior ao introduzido pelo utilizador!");
        }else{
        resultado = prev / n;
        System.out.println(resultado);
        }
    }
    public static void previsaoMMSMES(int mes, int ano, int[][] dadosFicheiro, int linhas) {
        int n;
        Scanner ler = new Scanner(System.in);
        System.out.println("Introduza a ordem da média móvel");
        n = ler.nextInt();
        double prev = 0, resultado;
        for (int i = 0; i < linhas; i++) {
            for (int k = 0; k < n && k <= i; k++) {
                if (dadosFicheiro[i][0] == ano && dadosFicheiro[i][1] == mes-1) {
                    prev = (dadosFicheiro[i - k][4]) + prev;
                }
            }
        }
        if (prev==0){
            System.out.println("Não existe momento anterior ao introduzido pelo utilizador!");
        }else{
        resultado = prev / n;
        System.out.println(resultado);
        }
    }
    public static void previsaoMMEP(int dia, int mes, int ano, int upperLimit, int lowerLimit, int[][] dadosFicheiro, int linhas) {
        double prev = 0, a;
        Scanner ordem = new Scanner(System.in);
        System.out.println("Introduza o valor de α (]0,1])");
        do {
            a = ordem.nextDouble();
        } while (a <= 0 || a > 1);
        for (int i = 0; i < linhas; i++) {
            if (dadosFicheiro[i][0] == ano && dadosFicheiro[i][1] == mes && dadosFicheiro[i][2] == dia-1 && dadosFicheiro[linhas][3] >= lowerLimit && dadosFicheiro[linhas][3] <= upperLimit) {
                prev = a * dadosFicheiro[i][4] + (1 - a) * (prev - 1);

            }
        }
        if (prev==0){
            System.out.println("Não existe momento anterior ao introduzido pelo utilizador!");
        }else{
            System.out.println(prev);
        }
    }
    public static void previsaoMMEPDIA(int dia, int mes, int ano, int[][] dadosFicheiro, int linhas) {
        double prev = 0, a;
        Scanner ordem = new Scanner(System.in);
        System.out.println("Introduza o valor de α (]0,1])");
        do {
            a = ordem.nextDouble();
        } while (a <= 0 || a > 1);
        for (int i = 0; i < linhas; i++) {
            if (dadosFicheiro[i][0] == ano && dadosFicheiro[i][1] == mes && dadosFicheiro[i][2] == dia-1) {
                prev = a * dadosFicheiro[i][4] + (1 - a) * (prev - 1);

            }
        }
        if (prev==0){
            System.out.println("Não existe momento anterior ao introduzido pelo utilizador!");
        }else{
            System.out.println(prev);
        }
    }
    public static void previsaoMMEPMES(int mes, int ano, int[][] dadosFicheiro, int linhas) {
        double prev = 0, a;
        Scanner ordem = new Scanner(System.in);
        System.out.println("Introduza o valor de α (]0,1])");
        do {
            a = ordem.nextDouble();
        } while (a <= 0 || a > 1);
        for (int i = 0; i < linhas; i++) {
            if (dadosFicheiro[i][0] == ano && dadosFicheiro[i][1] == mes-1) {
                prev = a * dadosFicheiro[i][4] + (1 - a) * (prev - 1);

            }
        }
        if (prev==0){
            System.out.println("Não existe momento anterior ao introduzido pelo utilizador!");
        }else{
            System.out.println(prev);
        }
    }
    public static int lerFicheiroCSV (int[][] dadosFicheiro) throws FileNotFoundException{
     AnularMemoriaArr(dadosFicheiro);
     int colunas = 0;
     String filename;
     Scanner ler = new Scanner(System.in);
     System.out.println("Introduza o nome do ficheiro: ");
     filename=ler.nextLine();
     Scanner input = new Scanner(new File(filename));

     String lixo = input.nextLine();
     while(input.hasNext()){
         String linha = input.nextLine();
         String[] separador;
         separador = linha.split(",");
         dadosFicheiro[colunas][0]= Integer.valueOf(separador[0]);
         dadosFicheiro[colunas][1]= Integer.valueOf(separador[1]);
         dadosFicheiro[colunas][2]= Integer.valueOf(separador[2]);
         dadosFicheiro[colunas][3]= Integer.valueOf(separador[3]);
         colunas++;
     }
     for(int i=0; i<5; i++){
         for(int j=0; j<4; j++){
             System.out.println(dadosFicheiro[i][j]);
         }
     }
     input.close();
        return colunas;

}
    public static void AnularMemoriaArr (int[][] dadosFicheiro){
      dadosFicheiro=null;
    }
    }

